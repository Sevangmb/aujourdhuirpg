
'use server';
/**
 * @fileOverview Generates narrative scenarios for the RPG game based on player state and pre-calculated effects.
 * The AI now acts as a Game Master, able to generate not just text but also game events like quests and NPCs.
 *
 * - generateScenario - A function that generates a scenario narration and game events.
 * - GenerateScenarioInput - The input type for the generateScenario function.
 * - GenerateScenarioOutput - The return type for the generateScenario function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'zod';
import { getWeatherTool } from '@/ai/tools/get-weather-tool';
import { getWikipediaInfoTool } from '@/ai/tools/get-wikipedia-info-tool';
import { getNearbyPoisTool } from '@/ai/tools/get-nearby-pois-tool';
import { getNewsTool } from '@/ai/tools/get-news-tool';
import { getRecipesTool } from '@/ai/tools/get-recipes-tool';
import { getBookDetailsTool } from '@/ai/tools/get-book-details-tool';
import {
  GenerateScenarioInputSchema,
  GenerateScenarioOutputSchema,
} from './generate-scenario-schemas';
import type { ToneSettings, GameTone, StoryChoice } from '@/lib/types';


export type GenerateScenarioInput = z.infer<typeof GenerateScenarioInputSchema>;
export type GenerateScenarioOutput = z.infer<typeof GenerateScenarioOutputSchema>;

export async function generateScenario(input: GenerateScenarioInput): Promise<GenerateScenarioOutput> {
  if (!process.env.GOOGLE_API_KEY) {
    console.error("‚ùå CRITICAL ERROR: GOOGLE_API_KEY is not set in .env.local");
    return {
      scenarioText: `
        <div class="bg-red-50 border border-red-200 rounded-lg p-6 mb-4">
          <div class="flex items-center mb-3">
            <svg class="w-6 h-6 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 18.5c-.77.833.192 2.5 1.732 2.5z"/>
            </svg>
            <h3 class="text-red-800 font-bold text-lg">üö® Configuration IA Manquante</h3>
          </div>
          <p class="text-red-700 mb-4">La g√©n√©ration de sc√©nario par l'IA n√©cessite une cl√© API Google. Cette fonctionnalit√© est actuellement d√©sactiv√©e.</p>
          <div class="bg-white rounded-lg p-4 border border-red-200">
            <p class="text-red-800 font-semibold mb-2">üìã Pour corriger ce probl√®me :</p>
            <ol class="list-decimal list-inside text-red-700 space-y-1 text-sm">
              <li>Obtenez une cl√© API gratuite sur <a href="https://makersuite.google.com/app/apikey" target="_blank" class="underline font-medium hover:text-red-900">Google AI Studio</a></li>
              <li>Cr√©ez ou modifiez le fichier <code class="bg-red-100 px-1 rounded">.env.local</code> dans votre projet</li>
              <li>Ajoutez la ligne : <code class="bg-red-100 px-1 rounded">GOOGLE_API_KEY=votre_cl√©_ici</code></li>
              <li>Red√©marrez le serveur avec <code class="bg-red-100 px-1 rounded">npm run dev</code></li>
            </ol>
          </div>
        </div>
      `,
      choices: [
        {
          id: 'retry-after-config',
          text: 'üîÑ R√©essayer apr√®s configuration',
          description: 'Recharger la page pour tester la nouvelle configuration',
          iconName: 'Zap',
          type: 'action',
          mood: 'adventurous',
          consequences: ['Configuration test√©e', 'IA r√©activ√©e si cl√©s valides']
        },
        {
          id: 'view-setup-guide',
          text: 'üìñ Voir le guide de configuration',
          description: 'Consulter la documentation compl√®te',
          iconName: 'BookOpen',
          type: 'reflection',
          mood: 'contemplative',
          consequences: ['Documentation affich√©e', 'Instructions d√©taill√©es']
        }
      ],
      aiRecommendation: { 
        focus: 'Configuration requise', 
        reasoning: 'La cl√© API Google est n√©cessaire pour toutes les fonctionnalit√©s IA du jeu.' 
      },
    };
  }
  
  try {
    const toneInstructions = generateToneInstructions(input.player?.toneSettings);
    
    const { output } = await ai.generate({
        model: 'googleai/gemini-1.5-flash-latest',
        prompt: FULL_SCENARIO_PROMPT,
        input: { ...input, toneInstructions },
        output: { schema: GenerateScenarioOutputSchema },
        tools: [getWeatherTool, getWikipediaInfoTool, getNearbyPoisTool, getNewsTool, getRecipesTool, getBookDetailsTool],
        config: {
            safetySettings: [
              { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_NONE' },
              { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_NONE' },
              { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_NONE' },
              { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_NONE' },
            ],
        },
    });

    if (!output) {
        throw new Error("Le mod√®le IA n'a retourn√© aucune sortie. Cela peut indiquer un probl√®me de configuration ou de connectivit√©.");
    }
    if (!output.choices || output.choices.length === 0) {
        console.warn("IA n'a pas g√©n√©r√© de choix, ajout d'un choix par d√©faut");
        output.choices = [{
          id: 'look_around',
          text: "Observer les alentours",
          description: "Prendre un moment pour analyser la situation et chercher de nouvelles options.",
          iconName: "Eye",
          type: 'observation',
          mood: 'contemplative',
          consequences: ['Nouvelles informations', 'Pas de changement majeur'],
        }];
    }
    return output;

  } catch (error: any) {
    console.error('‚ùå Erreur d√©taill√©e dans generateScenarioFlow:', {
      message: error.message,
      cause: error.cause,
      stack: error.stack,
      name: error.name
    });
    
    let technicalDetails = `Message: ${error.message}`;
    if (error.cause) {
      technicalDetails += ` Cause: ${JSON.stringify(error.cause)}`;
    }
    
    return {
      scenarioText: `
        <div class="bg-red-50 border border-red-200 rounded-lg p-6 mb-4">
          <div class="flex items-center mb-3">
            <svg class="w-6 h-6 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 18.5c-.77.833.192 2.5 1.732 2.5z"/>
            </svg>
            <h3 class="text-red-800 font-bold text-lg">üö® Erreur Critique IA</h3>
          </div>
          <p class="text-red-700 mb-4">L'IA n'a pas pu g√©n√©rer de sc√©nario. **V√©rifiez votre cl√© API dans <code>.env.local</code> et la configuration de votre projet Google Cloud.**</p>
          <div class="bg-white rounded-lg p-4 border border-red-200 mb-4">
            <p class="text-red-800 font-semibold mb-2">üîß Solutions possibles :</p>
            <ul class="list-disc list-inside text-red-700 space-y-1 text-sm">
              <li>V√©rifiez votre connexion internet</li>
              <li>Red√©marrez le serveur (npm run dev)</li>
              <li>V√©rifiez que votre cl√© API est valide sur <a href="https://makersuite.google.com/app/apikey" target="_blank" class="underline">Google AI Studio</a></li>
              <li>Assurez-vous que l'API "Generative Language" est activ√©e dans votre projet Google Cloud.</li>
              <li>V√©rifiez les logs de la console pour plus de d√©tails techniques.</li>
            </ul>
          </div>
          <details class="bg-red-100 rounded-lg border border-red-200">
            <summary class="text-red-800 font-medium text-sm p-3 cursor-pointer">üîç D√©tails techniques</summary>
            <div class="p-3 pt-0">
              <code class="text-red-700 text-xs bg-white p-2 rounded block break-all whitespace-pre-wrap">${technicalDetails}</code>
            </div>
          </details>
        </div>
      `,
      choices: [{
       id: 'retry_action',
       text: "üîÑ R√©essayer l'action pr√©c√©dente",
       description: "Tenter de relancer la derni√®re action pour voir si l'IA r√©pond cette fois.",
       iconName: 'Zap',
       type: 'action',
       mood: 'adventurous',
       consequences: ['Nouvelle tentative', 'Peut fonctionner si probl√®me temporaire'],
     }, {
       id: 'view_setup_guide',
       text: 'üìñ Voir le guide de configuration',
       description: 'Consulter la documentation compl√®te sur la configuration des cl√©s API.',
       iconName: 'BookOpen',
       type: 'reflection',
       mood: 'contemplative',
       consequences: ['Documentation affich√©e', 'Instructions d√©taill√©es']
     }],
      aiRecommendation: { focus: 'Erreur', reasoning: `Erreur critique du mod√®le IA. (${technicalDetails})` },
    };
  }
}

const toneDetails: Record<GameTone, Record<string, string>> = {
    Humoristique: {
        style: "Vif, jeux de mots, ironique, exag√©r√©.",
        ambiance: "L√©g√®re, absurde, cocasse.",
        dialogues: "Sarcastiques, moqueurs, pleins d'esprit.",
        actions: "Qu√™tes farfelues, choix comiques, improvisation.",
    },
    Action: {
        style: "Direct, percutant, rythme rapide, phrases courtes.",
        ambiance: "Tension, cin√©matique, mouvement constant.",
        dialogues: "Directs, ordres, concis.",
        actions: "Combat (utiliser 'startCombat'), poursuites, sauvetages, r√©actions rapides.",
    },
    Romantique: {
        style: "M√©taphorique, sensoriel, po√©tique.",
        ambiance: "Intime, √©motionnelle, contemplative.",
        dialogues: "Tendres, sinc√®res, suggestifs.",
        actions: "Conversations profondes, admiration, moments partag√©s.",
    },
    Dramatique: {
        style: "Solennel, vocabulaire riche, rythme pos√©.",
        ambiance: "Pesante, introspective, conflits internes.",
        dialogues: "Charg√©s d'√©motion, s√©rieux, r√©flexions profondes.",
        actions: "Dilemmes moraux, sacrifices, choix aux lourdes cons√©quences.",
    },
    Myst√©rieux: {
        style: "Elliptique, ambigu, suggestif.",
        ambiance: "Suspense, secrets, non-dits, indices subtils.",
        dialogues: "Cryptiques, allusifs, questions ouvertes.",
        actions: "Enqu√™te, recherche d'indices, infiltration, r√©solution d'√©nigmes.",
    },
    √âpique: {
        style: "Noble, grandiose, majestueux.",
        ambiance: "H√©ro√Øque, panoramas vastes, souffle de grandeur.",
        dialogues: "Solennels, proph√©tiques, discours marquants.",
        actions: "Grandes qu√™tes, batailles, actes h√©ro√Øques, alliances.",
    },
    "Science-Fiction": {
        style: "Pr√©cis, technologique, conceptuel.",
        ambiance: "Futuriste, high-tech, √©trange, merveilleux ou dystopique.",
        dialogues: "Logiques, techniques, explorant des concepts complexes.",
        actions: "Exploration technologique, √©nigmes scientifiques, conflits futuristes.",
    },
    Fantastique: {
        style: "Po√©tique, onirique, √©vocateur.",
        ambiance: "Magique, surnaturelle, merveilleuse et inqui√©tante.",
        dialogues: "Imag√©s, symboliques, parlant √† des cr√©atures.",
        actions: "Qu√™tes magiques, interaction avec le surnaturel, d√©couverte de mythes.",
    },
    Thriller: {
        style: "Incisif, rythm√©, nerveux, direct.",
        ambiance: "Tension psychologique, parano√Øa, urgence, danger imminent.",
        dialogues: "Tendres, rapides, soup√ßonneux.",
        actions: "Poursuites, d√©jouer des complots, courses contre la montre.",
    },
    Horreur: {
        style: "Sensoriel, sombre, cr√©ant la tension.",
        ambiance: "Oppressante, angoissante, macabre, d√©rangeante.",
        dialogues: "Chuchotements, cris, d√©sespoir, folie.",
        actions: "Survie, fuite, confrontation avec des monstruosit√©s.",
    },
};


function generateToneInstructions(toneSettings: ToneSettings | undefined): string {
  if (!toneSettings) {
    return "Le style narratif doit √™tre √©quilibr√© et neutre.";
  }

  const activeTones = (Object.entries(toneSettings) as [GameTone, boolean][])
    .filter(([, isActive]) => isActive)
    .map(([toneName]) => toneName);

  if (activeTones.length === 0) {
    return "Le style narratif doit √™tre √©quilibr√© et neutre.";
  }

  const instructions: string[] = [];
  instructions.push(`Le style narratif doit combiner les caract√©ristiques des tonalit√©s suivantes:`);

  activeTones.forEach(toneName => {
    const details = toneDetails[toneName];
    if (details) {
      instructions.push(`\n**Pour le ton '${toneName}' :**`);
      instructions.push(`- **Style & Rythme :** ${details.style}`);
      instructions.push(`- **Ambiance & Descriptions :** ${details.ambiance}`);
      instructions.push(`- **Dialogues :** ${details.dialogues}`);
      instructions.push(`- **Types de Choix √† Proposer :** ${details.actions}`);
    }
  });

  return `**Instructions de Tonalit√© Sp√©cifiques :**\n${instructions.join('\n')}`;
}

const FULL_SCENARIO_PROMPT = `Vous √™tes un ma√Ætre de jeu (MJ) et narrateur cr√©atif pour "Aujourd'hui RPG", un jeu de r√¥le textuel se d√©roulant en France √† l'√©poque suivante : **{{{player.era}}}**. Votre √©criture doit √™tre en fran√ßais, dans une police de caract√®re serif comme 'Literata'. Votre r√¥le est de raconter, pas de d√©cider. Votre texte doit √™tre a√©r√©, avec des paragraphes (<p>) et des dialogues pertinents.

**T√ÇCHE PRINCIPALE :**
{{#if (eq playerChoiceText "[COMMENCER L'AVENTURE]")}}
  **PROLOGUE :** √âcrivez une sc√®ne d'introduction captivante pour le personnage suivant. Plantez le d√©cor, introduisez le personnage, et sugg√©rez le d√©but d'une aventure. Proposez 3 choix narratifs initiaux dans le champ \`choices\`.
{{else}}
  **NARRATION :**
  1.  **Raconter (scenarioText) :** Bas√© sur \`gameEvents\`, √©crivez une narration HTML immersive qui d√©crit le r√©sultat de l'action du joueur. C'est votre t√¢che la plus importante.
  2.  **Proposer des choix (choices) :** Proposez 3-4 choix NARRATIFS et CR√âATIFS. Ne dupliquez pas les actions de \`suggestedContextualActions\`. Ne proposez jamais de choix d'attaque, utilisez \`startCombat\` √† la place.
  3.  **Sugg√©rer des √©v√©nements (optionnel) :** Si la narration le justifie, vous pouvez utiliser les champs optionnels comme \`newPNJs\`, \`newItems\`, \`pnjUpdates\`, etc. Utilisez-les avec parcimonie.
{{/if}}

**PRINCIPES DIRECTEURS :**
- **FORMATAGE HTML :** Utilisez des balises \`<p>\` pour les paragraphes. Pour les dialogues, utilisez le format: \`<p><strong>Nom du PNJ :</strong> ¬´ ... ¬ª</p>\`.
- **TONALIT√â :** Suivez les instructions de tonalit√©. {{{toneInstructions}}}
- **COH√âRENCE :** Utilisez le contexte fourni (\`player\`, \`cascadeResult\`, etc.) pour une narration riche et coh√©rente.
- **IC√îNES :** Pour \`iconName\`, utilisez UNIQUEMENT une valeur de la liste suivante : Eye, Search, Compass, MapPin, Map, MessageSquare, Users, Heart, Zap, Sword, Wrench, Briefcase, KeyRound, Shield, Feather, Drama, Utensils, ShoppingCart, ChefHat, GlassWater, BookOpen, Sparkles, Brain, Wind, Smartphone, Camera, NotebookPen.
- **OUTILS :** Utilisez les outils (\`getWeatherTool\`, etc.) si n√©cessaire pour enrichir le r√©cit.

**Contexte de l'Action et du Monde**
- **Joueur :** {{{player.name}}}, {{{player.gender}}}, {{{player.age}}} ans. Pass√© : {{{player.background}}}. Traits : {{{player.traitsMentalStates.join ', '}}}.
- **Lieu :** {{{player.currentLocation.name}}}
- **Contexte des Actions Logiques (Facultatif) :**
  {{#if suggestedContextualActions}}
  Le moteur de jeu a d√©j√† identifi√© les actions contextuelles suivantes. Ne les reproposez PAS :
  {{#each suggestedContextualActions}}
  - {{this.text}}
  {{/each}}
  {{/if}}
- **Contexte de la Cascade (Infos Suppl√©mentaires) :** {{{cascadeResult}}}

**Action du Joueur et Cons√©quences Calcul√©es (Ce que vous devez raconter) :**
- **Action Saisie :** '{{{playerChoiceText}}}'
- **R√©sum√© des √âv√©nements D√©terministes √† Raconter :** {{{gameEvents}}}

Sur la base de tout ce qui pr√©c√®de, g√©n√©rez la sortie JSON compl√®te, incluant le 'scenarioText' et les 'choices'.
`;
