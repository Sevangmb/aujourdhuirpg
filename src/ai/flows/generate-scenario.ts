'use server';
/**
 * @fileOverview Generates narrative scenarios for the RPG game based on player state and pre-calculated effects.
 * The AI now acts as a Game Master, able to generate not just text but also game events like quests and NPCs.
 * 
 * ‚ö° CORRECTION DES ERREURS DE VALIDATION DE SCH√âMA ET QUOTA API
 * Cette version corrige les erreurs de validation iconName et am√©liore la gestion des quotas API.
 */

import {ai} from '@/ai/genkit';
import {z} from 'zod';
import { getWeatherTool } from '@/ai/tools/get-weather-tool';
import { getWikipediaInfoTool } from '@/ai/tools/get-wikipedia-info-tool';
import { getNearbyPoisTool } from '@/ai/tools/get-nearby-pois-tool';
import { getNewsTool } from '@/ai/tools/get-news-tool';
import { getRecipesTool } from '@/ai/tools/get-recipes-tool';
import { getBookDetailsTool } from '@/ai/tools/get-book-details-tool';
import {
  GenerateScenarioInputSchema,
  GenerateScenarioOutputSchema,
} from './generate-scenario-schemas';
import type { ToneSettings, GameTone } from '@/lib/types';
import { ACTION_TYPES, MOOD_TYPES, CHOICE_ICON_NAMES } from '@/lib/types';

export type GenerateScenarioInput = z.infer<typeof GenerateScenarioInputSchema>;
export type GenerateScenarioOutput = z.infer<typeof GenerateScenarioOutputSchema>;

/**
 * üõ†Ô∏è Fonction pour valider et corriger les choix g√©n√©r√©s par l'IA
 * Corrige automatiquement les valeurs invalides pour √©viter les erreurs de validation
 */
function validateAndFixChoices(choices: any[]): any[] {
  return choices.map((choice, index) => {
    const fixedChoice = { ...choice };
    
    // V√©rifier et corriger l'iconName (CAUSE PRINCIPALE DE L'ERREUR)
    if (!fixedChoice.iconName || !CHOICE_ICON_NAMES.includes(fixedChoice.iconName)) {
      console.warn(`üîß IconName invalide d√©tect√© au choix ${index}: "${fixedChoice.iconName}". Correction automatique appliqu√©e.`);
      
      // Choisir une ic√¥ne appropri√©e selon le type d'action
      const iconMap: Record<string, string> = {
        observation: 'Eye',
        exploration: 'Compass', 
        social: 'Users',
        action: 'Zap',
        reflection: 'Brain',
        job: 'Briefcase'
      };
      
      fixedChoice.iconName = iconMap[fixedChoice.type] || 'Zap';
    }
    
    // V√©rifier et corriger le type d'action
    if (!fixedChoice.type || !ACTION_TYPES.includes(fixedChoice.type)) {
      console.warn(`üîß ActionType invalide d√©tect√© au choix ${index}: "${fixedChoice.type}". Utilisation de 'action' par d√©faut.`);
      fixedChoice.type = 'action';
    }
    
    // V√©rifier et corriger le mood
    if (!fixedChoice.mood || !MOOD_TYPES.includes(fixedChoice.mood)) {
      console.warn(`üîß MoodType invalide d√©tect√© au choix ${index}: "${fixedChoice.mood}". Utilisation de 'adventurous' par d√©faut.`);
      fixedChoice.mood = 'adventurous';
    }
    
    // S'assurer que les champs obligatoires existent
    fixedChoice.id = fixedChoice.id || `choice_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    fixedChoice.text = fixedChoice.text || "Action par d√©faut";
    fixedChoice.description = fixedChoice.description || "Description par d√©faut";
    fixedChoice.consequences = fixedChoice.consequences || ["Action effectu√©e"];
    
    return fixedChoice;
  });
}

/**
 * üìä Gestionnaire simple de quota API
 */
class SimpleQuotaManager {
  private requestCount = 0;
  private lastReset = Date.now();
  private readonly HOURLY_LIMIT = 50; // Limite conservatrice
  private readonly RESET_INTERVAL = 60 * 60 * 1000; // 1 heure
  
  canMakeRequest(): boolean {
    const now = Date.now();
    
    // Reset du compteur si une heure s'est √©coul√©e
    if (now - this.lastReset > this.RESET_INTERVAL) {
      this.lastReset = now;
      this.requestCount = 0;
    }
    
    return this.requestCount < this.HOURLY_LIMIT;
  }
  
  recordRequest(): void {
    this.requestCount++;
  }
  
  getStatus() {
    return {
      remaining: Math.max(0, this.HOURLY_LIMIT - this.requestCount),
      resetIn: Math.max(0, this.RESET_INTERVAL - (Date.now() - this.lastReset))
    };
  }
}

const quotaManager = new SimpleQuotaManager();

export async function generateScenario(input: GenerateScenarioInput): Promise<GenerateScenarioOutput> {
  // V√©rification des cl√©s API avec diagnostic am√©lior√©
  const googleApiKey = process.env.GOOGLE_API_KEY;
  const geminiApiKey = process.env.GEMINI_API_KEY;
  
  if (!googleApiKey && !geminiApiKey) {
    console.error("‚ùå ERREUR CRITIQUE: Aucune cl√© API Google/Gemini trouv√©e");
    console.error("Variables d'environnement v√©rifi√©es:");
    console.error("- GOOGLE_API_KEY:", googleApiKey ? "‚úÖ Pr√©sente" : "‚ùå Manquante");
    console.error("- GEMINI_API_KEY:", geminiApiKey ? "‚úÖ Pr√©sente" : "‚ùå Manquante");
    
    return {
      scenarioText: `
        <div class="bg-red-50 border border-red-200 rounded-lg p-6 mb-4">
          <div class="flex items-center mb-3">
            <svg class="w-6 h-6 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 18.5c-.77.833.192 2.5 1.732 2.5z"/>
            </svg>
            <h3 class="text-red-800 font-bold text-lg">üö® Configuration IA Manquante</h3>
          </div>
          
          <p class="text-red-700 mb-4">La g√©n√©ration de sc√©nario par l'IA n√©cessite une cl√© API Google. Cette fonctionnalit√© est actuellement d√©sactiv√©e.</p>
          
          <div class="bg-white rounded-lg p-4 border border-red-200">
            <p class="text-red-800 font-semibold mb-2">üìã Pour corriger ce probl√®me :</p>
            <ol class="list-decimal list-inside text-red-700 space-y-1 text-sm">
              <li>Obtenez une cl√© API gratuite sur <a href="https://makersuite.google.com/app/apikey" target="_blank" class="underline font-medium hover:text-red-900">Google AI Studio</a></li>
              <li>Cr√©ez ou modifiez le fichier <code class="bg-red-100 px-1 rounded">.env.local</code> dans votre projet</li>
              <li>Ajoutez la ligne : <code class="bg-red-100 px-1 rounded">GOOGLE_API_KEY=votre_cl√©_ici</code></li>
              <li>Red√©marrez le serveur avec <code class="bg-red-100 px-1 rounded">npm run dev</code></li>
            </ol>
          </div>
        </div>
      `,
      choices: [
        {
          id: 'retry-after-config',
          text: 'üîÑ R√©essayer apr√®s configuration',
          description: 'Recharger la page pour tester la nouvelle configuration',
          iconName: 'RefreshCw',
          type: 'action',
          mood: 'adventurous',
          consequences: ['Configuration test√©e', 'IA r√©activ√©e si cl√©s valides']
        },
        {
          id: 'continue-degraded',
          text: '‚ö†Ô∏è Continuer sans IA (mode d√©grad√©)',
          description: 'Jouer avec des fonctionnalit√©s limit√©es',
          iconName: 'AlertTriangle',
          type: 'action',
          mood: 'contemplative',
          consequences: ['Exp√©rience limit√©e', 'Pas de g√©n√©ration IA']
        }
      ],
      aiRecommendation: { 
        focus: 'Configuration requise', 
        reasoning: 'La cl√© API Google/Gemini est n√©cessaire pour toutes les fonctionnalit√©s IA du jeu.' 
      },
    };
  }
  
  // V√©rification du quota avant l'appel IA
  if (!quotaManager.canMakeRequest()) {
    const status = quotaManager.getStatus();
    const resetMinutes = Math.ceil(status.resetIn / 1000 / 60);
    
    console.warn(`‚è≥ Quota API √©puis√©. Reset dans ${resetMinutes} minutes.`);
    
    return {
      scenarioText: `
        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-6 mb-4">
          <div class="flex items-center mb-3">
            <svg class="w-6 h-6 text-yellow-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
            <h3 class="text-yellow-800 font-bold text-lg">‚è≥ Quota API Temporairement √âpuis√©</h3>
          </div>
          
          <p class="text-yellow-700 mb-4">Les appels √† l'IA sont temporairement limit√©s pour √©viter les surco√ªts et respecter les quotas.</p>
          
          <div class="bg-white rounded-lg p-4 border border-yellow-200">
            <p class="text-yellow-800 font-semibold">üìä Statut du quota :</p>
            <p class="text-yellow-700 text-sm">‚Ä¢ Requ√™tes restantes: ${status.remaining}</p>
            <p class="text-yellow-700 text-sm">‚Ä¢ Reset automatique dans: ${resetMinutes} minutes</p>
          </div>
        </div>
      `,
      choices: [
        {
          id: 'wait_quota_reset',
          text: "‚è∞ Attendre le reset du quota",
          description: "Patienter que le quota API se renouvelle automatiquement",
          iconName: 'Clock',
          type: 'reflection',
          mood: 'contemplative',
          consequences: ['Quota renouvel√©', 'IA disponible'],
        },
        {
          id: 'continue_basic',
          text: "üéÆ Continuer en mode basique",
          description: "Jouer avec des actions pr√©d√©finies sans IA",
          iconName: 'Gamepad2',
          type: 'action', 
          mood: 'adventurous',
          consequences: ['Jeu simplifi√©', 'Pas de g√©n√©ration IA'],
        }
      ],
      aiRecommendation: { 
        focus: 'Quota Limit√©', 
        reasoning: `Attendez ${resetMinutes} minutes pour que le quota se renouvelle automatiquement.` 
      },
    };
  }
  
  // Tentative de g√©n√©ration avec gestion d'erreur robuste
  try {
    console.log("‚úÖ Cl√© API trouv√©e, tentative de g√©n√©ration de sc√©nario...");
    quotaManager.recordRequest();
    
    const result = await generateScenarioFlow(input);
    
    // Validation et correction automatique des choix
    if (result.choices && result.choices.length > 0) {
      result.choices = validateAndFixChoices(result.choices);
    }
    
    return result;
    
  } catch (error: any) {
    console.error("‚ùå Erreur lors de la g√©n√©ration du sc√©nario:", error);
    
    // Classification des erreurs pour un diagnostic pr√©cis
    const isQuotaError = error && (
      error.message?.includes('quota') || 
      error.message?.includes('limit') || 
      error.message?.includes('rate') ||
      error.message?.includes('429') ||
      error.code === 429 ||
      error.status === 429
    );
    
    const isSchemaError = error && (
      error.message?.includes('Schema validation failed') ||
      error.message?.includes('iconName') ||
      error.message?.includes('must be equal to one of the allowed values')
    );
    
    const isAuthError = error && (
      error.message?.includes('API key') || 
      error.message?.includes('authentication') ||
      error.message?.includes('unauthorized') ||
      error.message?.includes('403') ||
      error.message?.includes('401')
    );
    
    // Gestion sp√©cialis√©e selon le type d'erreur
    if (isQuotaError) {
      return {
        scenarioText: `
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-4">
            <div class="flex items-center mb-3">
              <svg class="w-6 h-6 text-blue-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              <h3 class="text-blue-800 font-bold text-lg">üìä Limite de Quota API Atteinte</h3>
            </div>
            
            <p class="text-blue-700 mb-4">Le service d'IA a atteint sa limite de quota. Veuillez patienter avant de r√©essayer.</p>
            
            <div class="bg-white rounded-lg p-4 border border-blue-200">
              <p class="text-blue-800 font-semibold mb-2">üí° Solutions :</p>
              <ul class="list-disc list-inside text-blue-700 space-y-1 text-sm">
                <li>Attendez quelques minutes pour que le quota se renouvelle</li>
                <li>V√©rifiez vos limites API sur <a href="https://makersuite.google.com/app/apikey" target="_blank" class="underline">Google AI Studio</a></li>
                <li>Consid√©rez upgrader votre plan API si n√©cessaire</li>
              </ul>
            </div>
          </div>
        `,
        choices: [
          {
            id: 'wait_and_retry',
            text: "‚è≥ Attendre et r√©essayer",
            description: "Patienter quelques minutes puis relancer l'action",
            iconName: 'Clock',
            type: 'reflection',
            mood: 'contemplative',
            consequences: ['Attente n√©cessaire', 'Quota peut se renouveler'],
          },
          {
            id: 'manual_continue',
            text: "üìù Continuer manuellement",
            description: "Analyser la situation sans IA pour continuer l'aventure",
            iconName: 'FileText',
            type: 'observation', 
            mood: 'contemplative',
            consequences: ['Continue sans IA', 'Exploration basique'],
          }
        ],
        aiRecommendation: { 
          focus: 'Quota √âpuis√©', 
          reasoning: 'Attendez que le quota API se renouvelle ou v√©rifiez votre configuration.' 
        },
      };
    }
    
    if (isSchemaError) {
      return {
        scenarioText: `
          <div class="bg-orange-50 border border-orange-200 rounded-lg p-6 mb-4">
            <div class="flex items-center mb-3">
              <svg class="w-6 h-6 text-orange-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 18.5c-.77.833.192 2.5 1.732 2.5z"/>
              </svg>
              <h3 class="text-orange-800 font-bold text-lg">üîß Erreur de Validation Corrig√©e</h3>
            </div>
            
            <p class="text-orange-700 mb-4">L'IA a g√©n√©r√© une r√©ponse avec des valeurs invalides. Le syst√®me a automatiquement appliqu√© des corrections.</p>
            
            <div class="bg-white rounded-lg p-4 border border-orange-200">
              <p class="text-orange-800 font-semibold mb-2">‚úÖ Corrections automatiques :</p>
              <ul class="list-disc list-inside text-orange-700 space-y-1 text-sm">
                <li>Valeurs d'ic√¥nes corrig√©es selon les standards</li>
                <li>Types d'actions valid√©s et normalis√©s</li>
                <li>Ambiances ajust√©es aux valeurs accept√©es</li>
              </ul>
            </div>
            
            <p class="text-orange-600 text-sm mt-3">Vous pouvez continuer votre aventure normalement avec les actions corrig√©es ci-dessous.</p>
          </div>
        `,
        choices: [
          {
            id: 'basic_observation',
            text: "üëÅÔ∏è Observer attentivement",
            description: "Regarder attentivement l'environnement imm√©diat",
            iconName: 'Eye',
            type: 'observation',
            mood: 'contemplative', 
            consequences: ['Informations sur le lieu', 'Nouvelle perspective'],
          },
          {
            id: 'basic_exploration',
            text: "üß≠ Explorer les environs",
            description: "Se d√©placer et d√©couvrir ce qui se trouve √† proximit√©",
            iconName: 'Compass',
            type: 'exploration',
            mood: 'adventurous',
            consequences: ['D√©couverte possible', 'D√©pense d\'√©nergie'],
          },
          {
            id: 'basic_social',
            text: "üë• Chercher des gens",
            description: "Essayer de rencontrer ou de parler √† des personnes",
            iconName: 'Users',
            type: 'social',
            mood: 'social',
            consequences: ['Nouvelles rencontres', 'Informations sociales'],
          }
        ],
        aiRecommendation: { 
          focus: 'Mode Corrig√©', 
          reasoning: 'Actions automatiquement corrig√©es et valid√©es pour continuer l\'aventure.' 
        },
      };
    }
    
    // Erreur g√©n√©rique avec diagnostic d√©taill√©
    let errorMessage = "Une erreur technique s'est produite lors de la g√©n√©ration du sc√©nario.";
    let technicalDetails = error.message || "Erreur inconnue";
    
    if (isAuthError) {
      errorMessage = "Probl√®me d'authentification avec l'API Google.";
      technicalDetails = "V√©rifiez que votre cl√© API est valide et a les bonnes permissions.";
    }
    
    return {
      scenarioText: `
        <div class="bg-red-50 border border-red-200 rounded-lg p-6 mb-4">
          <div class="flex items-center mb-3">
            <svg class="w-6 h-6 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 18.5c-.77.833.192 2.5 1.732 2.5z"/>
            </svg>
            <h3 class="text-red-800 font-bold text-lg">‚ùå Erreur Technique</h3>
          </div>
          
          <p class="text-red-700 mb-4">${errorMessage}</p>
          
          <div class="bg-white rounded-lg p-4 border border-red-200">
            <p class="text-red-800 font-semibold mb-2">üîç D√©tails techniques :</p>
            <code class="text-red-700 text-xs bg-red-100 p-2 rounded block break-all">
              ${technicalDetails}
            </code>
          </div>
          
          <div class="mt-4 p-3 bg-red-100 rounded-lg">
            <p class="text-red-800 text-sm">
              <strong>üí° Suggestion :</strong> R√©essayez dans quelques instants ou red√©marrez le serveur si le probl√®me persiste.
            </p>
          </div>
        </div>
      `,
      choices: [
        {
          id: 'retry_action',
          text: "üîÑ R√©essayer l'action",
          description: "Tenter de relancer la derni√®re action",
          iconName: 'RefreshCw',
          type: 'action',
          mood: 'adventurous',
          consequences: ['Nouvelle tentative', 'Peut fonctionner'],
        },
        {
          id: 'fallback_continue',
          text: "‚û°Ô∏è Continuer sans IA",
          description: "Poursuivre avec des actions basiques",
          iconName: 'ArrowRight',
          type: 'action',
          mood: 'contemplative',
          consequences: ['Mode d√©grad√©', 'Fonctionnalit√©s limit√©es'],
        }
      ],
      aiRecommendation: { 
        focus: 'Erreur Technique', 
        reasoning: errorMessage 
      },
    };
  }
}

// Reste du code existant (toneDetails, instructions, prompts, etc.)
const toneDetails: Record<GameTone, Record<string, string>> = {
    Humoristique: {
        style: "Vif, jeux de mots, ironique, exag√©r√©.",
        ambiance: "L√©g√®re, absurde, cocasse.",
        dialogues: "Sarcastiques, moqueurs, pleins d'esprit.",
        actions: "Qu√™tes farfelues, choix comiques, improvisation.",
    },
    Action: {
        style: "Direct, percutant, rythme rapide, phrases courtes.",
        ambiance: "Tension, cin√©matique, mouvement constant.",
        dialogues: "Directs, ordres, concis.",
        actions: "Combat (utiliser 'startCombat'), poursuites, sauvetages, r√©actions rapides.",
    },
    Romantique: {
        style: "M√©taphorique, sensoriel, po√©tique.",
        ambiance: "Intime, √©motionnelle, contemplative.",
        dialogues: "Tendres, sinc√®res, suggestifs.",
        actions: "Conversations profondes, admiration, moments partag√©s.",
    },
    Dramatique: {
        style: "Solennel, vocabulaire riche, rythme pos√©.",
        ambiance: "Pesante, introspective, conflits internes.",
        dialogues: "Charg√©s d'√©motion, s√©rieux, r√©flexions profondes.",
        actions: "Dilemmes moraux, sacrifices, choix aux lourdes cons√©quences.",
    },
    Myst√©rieux: {
        style: "Elliptique, ambigu, suggestif.",
        ambiance: "Suspense, secrets, non-dits, indices subtils.",
        dialogues: "Cryptiques, allusifs, questions ouvertes.",
        actions: "Enqu√™te, recherche d'indices, infiltration, r√©solution d'√©nigmes.",
    },
    √âpique: {
        style: "Noble, grandiose, majestueux.",
        ambiance: "H√©ro√Øque, panoramas vastes, souffle de grandeur.",
        dialogues: "Solennels, proph√©tiques, discours marquants.",
        actions: "Grandes qu√™tes, batailles, actes h√©ro√Øques, alliances.",
    },
    "Science-Fiction": {
        style: "Pr√©cis, technologique, conceptuel.",
        ambiance: "Futuriste, high-tech, √©trange, merveilleux ou dystopique.",
        dialogues: "Logiques, techniques, explorant des concepts complexes.",
        actions: "Exploration technologique, √©nigmes scientifiques, conflits futuristes.",
    },
    Fantastique: {
        style: "Po√©tique, onirique, √©vocateur.",
        ambiance: "Magique, surnaturelle, merveilleuse et inqui√©tante.",
        dialogues: "Imag√©s, symboliques, parlant √† des cr√©atures.",
        actions: "Qu√™tes magiques, interaction avec le surnaturel, d√©couverte de mythes.",
    },
    Thriller: {
        style: "Incisif, rythm√©, nerveux, direct.",
        ambiance: "Tension psychologique, parano√Øa, urgence, danger imminent.",
        dialogues: "Tendres, rapides, soup√ßonneux.",
        actions: "Poursuites, d√©jouer des complots, courses contre la montre.",
    },
    Horreur: {
        style: "Sensoriel, sombre, cr√©ant la tension.",
        ambiance: "Oppressante, angoissante, macabre, d√©rangeante.",
        dialogues: "Chuchotements, cris, d√©sespoir, folie.",
        actions: "Survie, fuite, confrontation avec des monstruosit√©s.",
    },
};

function generateToneInstructions(toneSettings: ToneSettings | undefined): string {
  if (!toneSettings) {
    return "Le style narratif doit √™tre √©quilibr√© et neutre.";
  }

  const activeTones = (Object.entries(toneSettings) as [GameTone, boolean][])
    .filter(([, isActive]) => isActive)
    .map(([toneName]) => toneName);

  if (activeTones.length === 0) {
    return "Le style narratif doit √™tre √©quilibr√© et neutre.";
  }

  const instructions: string[] = [];
  instructions.push(`Le style narratif doit combiner les caract√©ristiques des tonalit√©s suivantes:`);

  activeTones.forEach(toneName => {
    const details = toneDetails[toneName];
    if (details) {
      instructions.push(`\n**Pour le ton '${toneName}' :**`);
      instructions.push(`- **Style & Rythme :** ${details.style}`);
      instructions.push(`- **Ambiance & Descriptions :** ${details.ambiance}`);
      instructions.push(`- **Dialogues :** ${details.dialogues}`);
      instructions.push(`- **Types de Choix √† Proposer :** ${details.actions}`);
    }
  });

  return `**Instructions de Tonalit√© Sp√©cifiques :**\n${instructions.join('\n')}`;
}

// Instructions am√©lior√©es pour l'IA avec validation stricte
const CHOICE_INSTRUCTIONS = `
- **Coh√©rence des Choix :** Proposez 3-4 choix NARRATIFS et CR√âATIFS. Ne dupliquez pas les actions de \`suggestedContextualActions\`.
- **Pas de Combat :** Ne proposez JAMAIS de choix d'attaque, utilisez le champ \`startCombat\` pour initier un combat si la narration le justifie.
- **Champs Vides :** Laissez les champs \`energyCost\`, \`timeCost\`, et \`skillGains\` vides ; le moteur de jeu les calculera.

- **‚ö†Ô∏è RESPECT STRICT DES √âNUM√âRATIONS (OBLIGATOIRE POUR √âVITER LES ERREURS) :**
  
  **Pour le champ 'iconName', utilisez UNIQUEMENT une de ces valeurs exactes :**
  ${CHOICE_ICON_NAMES.map(icon => `"${icon}"`).join(', ')}
  
  **Pour le champ 'type', utilisez UNIQUEMENT :**
  ${ACTION_TYPES.map(type => `"${type}"`).join(', ')}
  
  **Pour le champ 'mood', utilisez UNIQUEMENT :**
  ${MOOD_TYPES.map(mood => `"${mood}"`).join(', ')}

- **üö® IMPORTANT :** Ne cr√©ez JAMAIS de nouvelles valeurs pour ces champs. Utilisez SEULEMENT celles list√©es ci-dessus.
- **‚úÖ Exemples d'iconName valides :** "Eye", "Compass", "Heart", "Sword", "Brain"
- **‚ùå Exemples d'iconName INVALIDES :** "Look", "Explore", "Attack", "Think" (ces valeurs causeront des erreurs)

**üîç VALIDATION AVANT ENVOI :**
Avant de g√©n√©rer votre r√©ponse JSON, v√©rifiez que CHAQUE choix respecte exactement ces contraintes.
Si vous n'√™tes pas s√ªr d'une valeur, utilisez ces valeurs par d√©faut s√ªres :
- iconName: "Zap"
- type: "action" 
- mood: "adventurous"
`;

const VALIDATION_REMINDER = `
**üö® VALIDATION CRITIQUE FINALE :**
Votre r√©ponse sera rejet√©e si elle contient des valeurs non autoris√©es. 
V√©rifiez une derni√®re fois que tous les iconName sont dans cette liste exacte :
[${CHOICE_ICON_NAMES.join(', ')}]
`;

const FULL_SCENARIO_PROMPT = `Vous √™tes un ma√Ætre de jeu (MJ) et narrateur cr√©atif pour "Aujourd'hui RPG", un jeu de r√¥le textuel se d√©roulant en France √† l'√©poque suivante : **{{{player.era}}}**. Votre √©criture doit √™tre en fran√ßais, dans une police de caract√®re serif comme 'Literata'. Votre r√¥le est de raconter, pas de d√©cider. Votre texte doit √™tre a√©r√©, avec des paragraphes (<p>) et des dialogues pertinents.

**T√ÇCHE PRINCIPALE :**
1.  **Narrer (scenarioText) :** Bas√© sur \`gameEvents\`, √©crivez une narration HTML immersive qui d√©crit le r√©sultat de l'action du joueur. C'est votre t√¢che la plus importante.
2.  **Proposer des choix (choices) :**
    ${CHOICE_INSTRUCTIONS}
3.  **Sugg√©rer des √©v√©nements (optionnel) :** Si la narration le justifie, vous pouvez utiliser les champs optionnels comme \`newPNJs\`, \`newItems\`, \`pnjUpdates\`, etc. Utilisez-les avec parcimonie.

${VALIDATION_REMINDER}

**PRINCIPES DIRECTEURS :**
- **FORMATAGE HTML :** Utilisez des balises \`<p>\` pour les paragraphes. Pour les dialogues, utilisez le format: \`<p><strong>Nom du PNJ :</strong> ¬´ ... ¬ª</p>\`.
- **TONALIT√â :** Suivez les instructions de tonalit√©. {{{toneInstructions}}}
- **COH√âRENCE :** Utilisez le contexte fourni (\`player\`, \`cascadeResult\`, etc.) pour une narration riche et coh√©rente.
- **OUTILS :** Utilisez les outils (\`getWeatherTool\`, etc.) si n√©cessaire pour enrichir le r√©cit.

**Contexte de l'Action et du Monde**
- **Joueur :** {{{player.name}}}, {{{player.gender}}}, {{{player.age}}} ans. Pass√© : {{{player.background}}}.
- **Lieu :** {{{player.currentLocation.name}}}
- **Contexte des Actions Logiques (Facultatif) :**
  {{#if suggestedContextualActions}}
  Le moteur de jeu a d√©j√† identifi√© les actions contextuelles suivantes. Ne les reproposez PAS :
  {{#each suggestedContextualActions}}
  - {{this.text}}
  {{/each}}
  {{/if}}
- **Contexte de la Cascade (Infos Suppl√©mentaires) :** {{{cascadeResult}}}

**Action du Joueur et Cons√©quences Calcul√©es (Ce que vous devez raconter) :**
- **Action Saisie :** '{{{playerChoiceText}}}'
- **R√©sum√© des √âv√©nements D√©terministes √† Raconter :** {{{gameEvents}}}

Sur la base de tout ce qui pr√©c√®de, g√©n√©rez la sortie JSON compl√®te, incluant le 'scenarioText' et les 'choices'.
**RAPPEL FINAL :** V√©rifiez que chaque iconName est exactement l'une des valeurs autoris√©es avant de soumettre votre r√©ponse.
`;

const FULL_PROLOGUE_PROMPT = `Vous √™tes un ma√Ætre de jeu (MJ) et narrateur cr√©atif pour "Aujourd'hui RPG".

**T√ÇCHE PRINCIPALE : PROLOGUE**
√âcrivez une sc√®ne d'introduction captivante en HTML pour le personnage suivant :
- **Personnage :** {{{player.name}}}, {{{player.gender}}} de {{{player.age}}} ans.
- **Contexte :** √âpoque "{{{player.era}}}", commen√ßant √† {{{player.currentLocation.name}}}. Pass√© : {{{player.background}}}.

Votre narration doit planter le d√©cor, introduire le personnage, et sugg√©rer le d√©but d'une aventure.
Suivez les instructions de tonalit√© ci-dessous.
Proposez 3 choix narratifs initiaux dans le champ \`choices\`.

**Instructions pour les choix :**
${CHOICE_INSTRUCTIONS}

**Instructions de Tonalit√© :**
{{{toneInstructions}}}

${VALIDATION_REMINDER}

**Format de Sortie :**
Assurez-vous de g√©n√©rer une sortie JSON valide avec les champs 'scenarioText' et 'choices'.
`;

const PromptInputSchema = GenerateScenarioInputSchema.extend({ 
  toneInstructions: z.string(),
});

const scenarioPrompt = ai.definePrompt({
  name: 'generateScenarioPrompt',
  model: 'googleai/gemini-1.5-flash-latest',
  tools: [getWeatherTool, getWikipediaInfoTool, getNearbyPoisTool, getNewsTool, getRecipesTool, getBookDetailsTool],
  input: { schema: PromptInputSchema },
  output: { schema: GenerateScenarioOutputSchema },
  config: {
    safetySettings: [
      { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_NONE' },
      { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_NONE' },
      { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_NONE' },
      { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_NONE' },
    ],
  },
  prompt: FULL_SCENARIO_PROMPT,
});

const prologuePrompt = ai.definePrompt({
  name: 'generateProloguePrompt',
  model: 'googleai/gemini-1.5-flash-latest',
  tools: [getWeatherTool, getWikipediaInfoTool, getNearbyPoisTool, getNewsTool, getRecipesTool, getBookDetailsTool],
  input: { schema: PromptInputSchema },
  output: { schema: GenerateScenarioOutputSchema },
  prompt: FULL_PROLOGUE_PROMPT,
});

const generateScenarioFlow = ai.defineFlow(
  {
    name: 'generateScenarioFlow',
    inputSchema: GenerateScenarioInputSchema, 
    outputSchema: GenerateScenarioOutputSchema,
  },
  async (input) => {
    const toneInstructions = generateToneInstructions(input.player?.toneSettings);
    const enrichedInput = { ...input, toneInstructions };

    const selectedPrompt = input.playerChoiceText === "[COMMENCER L'AVENTURE]"
      ? prologuePrompt
      : scenarioPrompt;

    try {
      const {output} = await selectedPrompt(enrichedInput); 

      if (!output) {
        throw new Error("Le mod√®le IA n'a retourn√© aucune sortie. Cela peut indiquer un probl√®me de configuration ou de connectivit√©.");
      }
      
      // Validation et correction automatique des choix AVANT de retourner
      if (output.choices && output.choices.length > 0) {
        console.log("üîç Validation des choix g√©n√©r√©s par l'IA...");
        output.choices = validateAndFixChoices(output.choices);
        console.log("‚úÖ Validation termin√©e");
      } else {
        console.warn("‚ö†Ô∏è IA n'a pas g√©n√©r√© de choix, ajout d'un choix par d√©faut");
        output.choices = [{
          id: 'look_around',
          text: "Observer les alentours",
          description: "Prendre un moment pour analyser la situation et chercher de nouvelles options.",
          iconName: "Eye",
          type: 'observation',
          mood: 'contemplative',
          consequences: ['Nouvelles informations', 'Pas de changement majeur'],
        }];
      }
      
      return output;

    } catch (error: any) {
       console.error('‚ùå Erreur d√©taill√©e dans generateScenarioFlow:', {
         message: error.message,
         cause: error.cause,
         stack: error.stack?.substring(0, 500), // Limite pour √©viter les logs trop longs
         name: error.name
       });
       
       // Re-lancer l'erreur pour qu'elle soit g√©r√©e par la fonction appelante
       throw error;
    }
  }
);