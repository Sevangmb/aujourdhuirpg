
'use server';
/**
 * @fileOverview Generates narrative scenarios for the RPG game based on player state and pre-calculated effects.
 * The AI now acts as a Game Master, able to generate not just text but also game events like quests and NPCs.
 *
 * - generateScenario - A function that generates a scenario narration and game events.
 * - GenerateScenarioInput - The input type for the generateScenario function.
 * - GenerateScenarioOutput - The return type for the generateScenario function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'zod';
import { getWeatherTool } from '@/ai/tools/get-weather-tool';
import { getWikipediaInfoTool } from '@/ai/tools/get-wikipedia-info-tool';
import { getNearbyPoisTool } from '@/ai/tools/get-nearby-pois-tool';
import { getNewsTool } from '@/ai/tools/get-news-tool';
import { getRecipesTool } from '@/ai/tools/get-recipes-tool';
import { getBookDetailsTool } from '@/ai/tools/get-book-details-tool';
import {
  GenerateScenarioInputSchema,
  GenerateScenarioOutputSchema,
} from './generate-scenario-schemas';
import type { ToneSettings, BookSearchResult } from '@/lib/types';


export type GenerateScenarioInput = z.infer<typeof GenerateScenarioInputSchema>;
export type GenerateScenarioOutput = z.infer<typeof GenerateScenarioOutputSchema>;

export async function generateScenario(input: GenerateScenarioInput): Promise<GenerateScenarioOutput> {
  if (!process.env.GOOGLE_API_KEY && !process.env.GEMINI_API_KEY) {
    console.warn("Genkit API key is not set. AI scenario generation is disabled.");
    return {
      scenarioText: `<p><strong>Fonctionnalit√© IA Indisponible</strong></p><p>La g√©n√©ration de sc√©nario par l'IA est d√©sactiv√©e car la cl√© API n√©cessaire n'est pas configur√©e.</p>`,
      choices: [],
      aiRecommendation: { focus: 'Erreur', reasoning: 'Cl√© API manquante.' },
    };
  }
  return generateScenarioFlow(input as any); // Cast as any because the input from game-logic has more fields
}


function generateToneInstructions(toneSettings: ToneSettings | undefined): string {
  if (!toneSettings || Object.keys(toneSettings).length === 0) {
    return "Le style narratif doit √™tre √©quilibr√© et neutre.";
  }

  const instructions: string[] = [];
  const sortedTones = Object.entries(toneSettings).sort(([, a], [, b]) => b - a);

  const primaryTone = sortedTones[0];
  
  if (primaryTone && primaryTone[1] > 55) { // Main tone must be significant
    switch (primaryTone[0]) {
      case 'Horreur':
        instructions.push("Adoptez un style narratif sombre et oppressant. Utilisez un vocabulaire qui √©voque le malaise et la tension. D√©crivez les ombres, les bruits √©tranges. Proposez des choix li√©s √† l'investigation du danger ou √† la confrontation avec l'inconnu.");
        break;
      case 'Romance':
        instructions.push("Utilisez un style po√©tique et sensoriel. D√©crivez les √©motions, les regards, les atmosph√®res avec des m√©taphores. Proposez des choix contemplatifs, comme savourer un moment, admirer une vue, ou engager une conversation intime.");
        break;
      case 'Humour':
        instructions.push("Cr√©ez des situations cocasses et l√©g√®res. Utilisez des dialogues pleins d'esprit et des descriptions ironiques. Proposez des choix qui permettent d'improviser, de faire une blague ou de prendre une situation √† la l√©g√®re.");
        break;
      case 'Myst√®re':
        instructions.push("Distillez des indices subtils et maintenez une ambiance ambigu√´. Privil√©giez les non-dits et les questions en suspens. Proposez des choix li√©s √† l'examen de d√©tails, √† la d√©duction et √† la recherche d'informations cach√©es.");
        break;
      case 'Action':
        instructions.push("Employez un style direct avec des phrases courtes et un rythme dynamique. D√©crivez les mouvements et les impacts. Proposez des choix qui incitent √† l'action rapide. Si la narration m√®ne √† un conflit, utilisez le champ 'startCombat' pour introduire un ennemi.");
        break;
      case 'Fantastique':
         instructions.push("Introduisez des √©l√©ments surnaturels ou magiques de mani√®re subtile ou grandiose. D√©crivez l'√©merveillement, l'√©tranget√©. Proposez des choix qui permettent d'interagir avec le merveilleux, de d√©couvrir des secrets anciens ou d'utiliser des capacit√©s extraordinaires.");
        break;
      case 'Science Fiction':
         instructions.push("Int√©grez des concepts technologiques avanc√©s, des dilemmes futuristes ou des rencontres extraterrestres. Utilisez un vocabulaire technique mais √©vocateur. Proposez des choix li√©s √† l'utilisation de la technologie, √† l'exploration spatiale ou √† des questionnements sur l'humanit√©.");
        break;
    }
  }

  if (instructions.length === 0) {
    return "Le style narratif doit √™tre √©quilibr√© et neutre.";
  }

  return `**Instructions de Tonalit√© Sp√©cifiques :** ${instructions.join(' ')}`;
}

// --- PROMPT COMPONENTS ---

const PROMPT_INTRO = `Vous √™tes un ma√Ætre de jeu (MJ) et narrateur cr√©atif pour "Aujourd'hui RPG", un jeu de r√¥le textuel se d√©roulant en France √† l'√©poque suivante : **{{{player.era}}}**. Votre √©criture doit √™tre en fran√ßais. Votre r√¥le est de raconter, pas de d√©cider.`;

const PROMPT_CORE_TASK = `
**T√¢che Principale : Raconter, Sugg√©rer, et Animer le Monde**
Votre mission est quadruple :

1.  **Raconter l'Histoire (scenarioText) :** Le moteur de jeu a calcul√© les cons√©quences de l'action du joueur (\`gameEvents\`). Transformez ces √©v√©nements bruts en une description narrative captivante en HTML. Soyez immersif, n'√©num√©rez pas les faits.

2.  **G√©n√©rer des Choix NARRATIFS et CR√âATIFS (choices) :** C'est votre mission la plus importante. Le moteur de jeu g√©n√®re d√©j√† des actions contextuelles (manger, acheter un caf√©...). Votre r√¥le est d'imaginer 3 √† 4 actions possibles qui sont M√âMORABLES, CR√âATIVES, et qui FONT AVANCER L'HISTOIRE.
    - **EXIGENCES STRICTES POUR VOS CHOIX :**
        - **Pensez comme un sc√©nariste :** Quels choix cr√©eraient du drame, du myst√®re, ou r√©v√©leraient quelque chose sur le monde ou le personnage ?
        - **Utilisez les PNJ et l'intrigue :** Proposez des interactions sociales inattendues, des actions pour faire avancer une qu√™te, ou des d√©cisions morales complexes.
        - **Soyez sp√©cifique :** Ne vous contentez pas d'un verbe, d√©crivez l'action de mani√®re √©vocatrice.
    - **√Ä INTERDIRE FORMELLEMENT (Actions trop g√©n√©riques ou g√©r√©es par la logique du jeu) :**
        - ‚ùå "Explorer les environs", "Observer les alentours"
        - ‚ùå "Parler √† quelqu'un" (Pr√©f√©rez "Confronter le marchand sur son mensonge")
        - ‚ùå "Manger", "Boire", "Aller √† [lieu proche]" (Le moteur de jeu s'en occupe d√©j√†)
        - ‚ùå Ne cr√©ez **JAMAIS** de choix de combat (Attaquer, Fuir...). Utilisez le champ \`startCombat\` pour initier un combat si la narration l'exige.
    - **EXEMPLES D'ACTIONS ATTENDUES (Narratives et cr√©atives) :**
        - ‚úÖ "Utiliser votre comp√©tence en observation pour d√©celer une incoh√©rence dans le t√©moignage du garde."
        - ‚úÖ "Proposer au musicien de rue de l'accompagner avec votre vieil harmonica, esp√©rant attirer une audience... et peut-√™tre des informations."
        - ‚úÖ "Graver discr√®tement un symbole myst√©rieux sur le banc, un signe de reconnaissance pour une soci√©t√© secr√®te √† laquelle vous appartenez."

3.  **Proposer des Changements au Monde (√âv√©nements de Jeu) :** Agissez comme un ma√Ætre de jeu. En fonction de votre narration, vous pouvez proposer des changements concrets.
    - Si un PNJ propose un travail, utilisez \`newQuests\` pour cr√©er une qu√™te.
    - Si le joueur d√©couvre un corps, utilisez \`newClues\` et \`startCombat\` avec un ennemi "Rat d'√©gout agressif".
    - Si le joueur trouve un portefeuille, utilisez \`newItems\` et \`newTransactions\`.
    - **Remplissez les champs** (\`newQuests\`, \`startCombat\`, \`newPNJs\`, etc.) **uniquement** si cela est logiquement justifi√© par le r√©cit. Sinon, laissez-les vides.

4.  **Donner un Conseil Strat√©gique (aiRecommendation) :** Si pertinent, analysez la situation globale du joueur (argent bas, qu√™te importante) et donnez un conseil via le champ optionnel \`aiRecommendation\`.
`;

const PROMPT_CASCADE_INSTRUCTIONS = `
**EXPLOITATION DU CONTEXTE DE LA CASCADE (TR√àS IMPORTANT)**
Le champ \`cascadeResult\` contient un r√©sum√© textuel des informations contextuelles g√©n√©r√©es par des modules sp√©cialis√©s. Votre t√¢che est d'utiliser ces informations pour rendre votre narration vivante et pour cr√©er des choix pertinents. Int√©grez ces informations naturellement dans le r√©cit et inspirez-vous d'elles pour cr√©er des choix d'action. Par exemple, si une opportunit√© de cuisine est list√©e, proposez un choix pour cuisiner. Si un contexte culturel est donn√©, proposez un choix pour explorer cet aspect. Si des livres sont mentionn√©s, proposez un choix pour les lire ou les acheter.
`;

const PROMPT_GUIDING_PRINCIPLES = `
**Principes Directeurs (TR√àS IMPORTANT) :**
- **ADAPTATION NARRATIVE :** Suivez imp√©rativement les instructions de tonalit√© ci-dessous.
{{{toneInstructions}}}

- **G√âN√âRATION DE JOBS :** Lorsque vous g√©n√©rez une qu√™te de type "job", vous devez fournir la comp√©tence requise dans le champ \`requiredSkill\` de l'objet de la qu√™te (par exemple, \`'technical.crafting'\`). Le moteur de jeu calculera la r√©compense mon√©taire en fonction du niveau de comp√©tence du joueur. Ne fixez PAS la r√©compense vous-m√™me.

- **CONTEXTE ENRICHI :** Vous recevez des donn√©es enrichies. Utilisez-les pour rendre votre narration VIVANTE, D√âTAILL√âE et COH√âRENTE.
  - **Cascade Modulaire :** ${PROMPT_CASCADE_INSTRUCTIONS}
  
  {{#if player.recentActionTypes}}
  üîÑ **√âVITEZ LA R√âP√âTITION :** Les derni√®res actions du joueur √©taient de type : {{player.recentActionTypes}}. Proposez des types d'actions narratifs diff√©rents. Le moteur de jeu ajoutera des actions utilitaires (manger, boire, etc.) si n√©cessaire.
  {{/if}}

- **UTILISATION DES OUTILS POUR L'INSPIRATION :** Utilisez les outils disponibles ('getWeatherTool', 'getNearbyPoisTool', etc.) pour enrichir votre narration et g√©n√©rer des choix contextuels.
`;

const PROMPT_PLAYER_CONTEXT = `
**Contexte du Joueur et du Monde :**
- Joueur : {{{player.name}}}, {{{player.gender}}}, {{{player.age}}} ans. Pass√© : {{{player.background}}}.
- Lieu : {{{player.currentLocation.name}}}
- Argent : {{{player.money}}}‚Ç¨
- Physiologie : Faim: {{{player.physiology.basic_needs.hunger.level}}}/100, Soif: {{{player.physiology.basic_needs.thirst.level}}}/100.
- Sc√®ne Pr√©c√©dente : {{{previousScenarioText}}}
`;

const PROMPT_ACTION_AND_EFFECTS = `
**Action du Joueur et Cons√©quences Calcul√©es par le Moteur :**
1.  **Action Saisie :** '{{{playerChoiceText}}}'
2.  **√âv√©nements D√©terministes √† Raconter (Format JSON) :** {{{gameEvents}}} (Int√©grez-les de mani√®re immersive dans la narration).
3.  **Contexte de la Cascade (Texte) :** {{{cascadeResult}}} (Utilisez ces informations pour la narration et les choix).

Sur la base de tout ce qui pr√©c√®de, g√©n√©rez la sortie JSON compl√®te, incluant le 'scenarioText' et les 'choices'.
`;

const FULL_PROMPT = `
${PROMPT_INTRO}
${PROMPT_CORE_TASK}
${PROMPT_GUIDING_PRINCIPLES}
${PROMPT_PLAYER_CONTEXT}
${PROMPT_ACTION_AND_EFFECTS}
`;

// --- NEW SCHEMAS FOR CONTEXT ---
const PoiContextSchema = z.object({
  name: z.string().optional(),
  type: z.string(),
  subCategory: z.string(),
  availableServices: z.array(z.string()),
  distance: z.number(),
});

const SuggestedActionContextSchema = z.object({
  text: z.string(),
  description: z.string(),
  type: z.string(),
  estimatedCost: z.object({ min: z.number(), max: z.number() }).optional(),
});


// --- PROMPTS DEFINITION ---

// This is the schema for the data passed to the prompt, including internal fields.
const PromptInputSchema = GenerateScenarioInputSchema.extend({ 
  toneInstructions: z.string(),
  suggestedContextualActions: z.array(SuggestedActionContextSchema).optional(),
});


const scenarioPrompt = ai.definePrompt({
  name: 'generateScenarioPrompt',
  model: 'googleai/gemini-1.5-flash-latest',
  tools: [getWeatherTool, getWikipediaInfoTool, getNearbyPoisTool, getNewsTool, getRecipesTool, getBookDetailsTool],
  input: { schema: PromptInputSchema },
  output: { schema: GenerateScenarioOutputSchema },
  config: {
    safetySettings: [
      { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_NONE' },
      { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_NONE' },
      { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_NONE' },
      { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_NONE' },
    ],
  },
  prompt: FULL_PROMPT,
});

const PROLOGUE_PROMPT_TASK = `
**T√¢che Principale : √âcrire un Prologue Captivant**
Vous commencez une nouvelle aventure de JDR textuel. √âcrivez une sc√®ne d'introduction (un prologue) engageante en fran√ßais pour un personnage avec les d√©tails suivants :

- Nom : {{{player.name}}}
- Genre : {{{player.gender}}}
- √Çge : {{{player.age}}}
- √âpoque : {{{player.era}}}
- Lieu de D√©part : {{{player.currentLocation.name}}}
- Pass√© : {{{player.background}}}

Plantez le d√©cor en fonction de l'√âpoque et du Lieu de D√©part. Pr√©sentez le personnage et laissez entrevoir le d√©but de son aventure.
{{{toneInstructions}}}

**Contraintes Importantes :**
- Le prologue doit √™tre purement narratif.
- La sortie DOIT √™tre du HTML valide.
- Fournissez 3 suggestions d'actions initiales dans le champ \`choices\` en respectant la structure compl√®te de l'objet 'StoryChoice'.

G√©n√©rez uniquement le 'scenarioText' et 'choices' pour le d√©but de l'aventure.
`;

const FULL_PROLOGUE_PROMPT = `
${PROMPT_INTRO}
${PROLOGUE_PROMPT_TASK}
`;

const prologuePrompt = ai.definePrompt({
  name: 'generateProloguePrompt',
  model: 'googleai/gemini-1.5-flash-latest',
  tools: [getWeatherTool, getWikipediaInfoTool, getNearbyPoisTool, getNewsTool, getRecipesTool, getBookDetailsTool],
  input: { schema: PromptInputSchema },
  output: { schema: GenerateScenarioOutputSchema },
  prompt: FULL_PROLOGUE_PROMPT,
});


// --- FLOW DEFINITION ---

// This is the schema for the data received by the flow from the client.
const FlowInputSchema = GenerateScenarioInputSchema.extend({
    suggestedContextualActions: z.array(SuggestedActionContextSchema).optional(),
});

const generateScenarioFlow = ai.defineFlow(
  {
    name: 'generateScenarioFlow',
    inputSchema: FlowInputSchema, // Use the extended schema to accept all fields
    outputSchema: GenerateScenarioOutputSchema,
  },
  async (input) => {
    const toneInstructions = generateToneInstructions(input.player?.toneSettings);
    // Construct the full object expected by the prompt
    const enrichedInput = { ...input, toneInstructions };

    const selectedPrompt = input.playerChoiceText === "[COMMENCER L'AVENTURE]"
      ? prologuePrompt
      : scenarioPrompt;

    try {
      const {output} = await selectedPrompt(enrichedInput); // No cast needed

      if (!output) {
        throw new Error("AI model did not return any output.");
      }
      // Ensure the output conforms to the schema, especially the non-optional 'choices' field.
      if (!output.choices) {
        output.choices = [];
      }
      return output;

    } catch (error) {
       console.error('Error in generateScenarioFlow calling prompt:', error);
       return {
         scenarioText: "<p>Erreur critique: L'IA n'a pas pu g√©n√©rer de sc√©nario. Veuillez r√©essayer ou v√©rifier la configuration du serveur.</p>",
         choices: [],
         aiRecommendation: { focus: 'Erreur', reasoning: 'Erreur critique du mod√®le IA.' },
       };
    }
  }
);
