

import type { Player, MomentumSystem } from './player-types';
import type { ToneSettings } from './tone-types';
import type { StoryChoice, ActionType } from './choice-types';
import type { Quest, PNJ, DynamicItemCreationPayload } from '.';
import type { HistoricalContact } from '../modules/historical/types';
import type { Enemy } from '@/modules/combat/types';
import type { EnhancedPOI } from './poi-types';

// This type represents the data for a scenario that the player is currently in.
export type Scenario = {
  scenarioText: string; // HTML content from AI
  choices?: StoryChoice[]; // Optional array of rich, guided choices generated by AI
  aiRecommendation?: { focus: string; reasoning: string };
};

export type JournalEntry = {
  id: string; // unique ID, e.g., from uuid
  timestamp: number; // game time in minutes
  type: 'location_change' | 'event' | 'player_action' | 'quest_update' | 'npc_interaction' | 'misc';
  text: string; // Description of the entry
  location?: Position; // Optional, if related to a specific location
};

// --- NEW EVENT-DRIVEN ARCHITECTURE ---
// Represents a single, concrete thing that happened in the game logic.
export type GameEvent =
  | { type: 'SKILL_CHECK_RESULT'; skill: string; success: boolean; degree: 'critical_success' | 'success' | 'failure' | 'critical_failure'; roll: number; total: number; difficulty: number; }
  | { type: 'TEXT_EVENT'; text: string; } // Generic event for narration
  | { type: 'PLAYER_STAT_CHANGE'; stat: keyof Player['stats']; change: number; finalValue: number; }
  | { type: 'PLAYER_PHYSIOLOGY_CHANGE'; stat: 'hunger' | 'thirst'; change: number; finalValue: number; }
  | { type: 'MOMENTUM_UPDATED'; newMomentum: MomentumSystem }
  | { type: 'XP_GAINED'; amount: number; }
  | { type: 'PLAYER_LEVELED_UP'; newLevel: number; }
  | { type: 'SKILL_XP_AWARDED', skill: string, amount: number }
  | { type: 'SKILL_LEVELED_UP', skill: string, newLevel: number }
  | { type: 'ITEM_ADDED'; itemId: string; itemName: string; quantity: number; }
  | { type: 'DYNAMIC_ITEM_ADDED'; payload: DynamicItemCreationPayload }
  | { type: 'ITEM_REMOVED'; itemId: string; itemName: string; quantity: number; }
  | { type: 'ITEM_USED'; instanceId: string; itemName: string; description: string; }
  | { type: 'ITEM_XP_GAINED'; instanceId: string; itemName: string; xp: number; }
  | { type: 'ITEM_LEVELED_UP'; instanceId: string; itemName: string; newLevel: number; newXp: number; newXpToNextLevel: number; }
  | { type: 'ITEM_EVOLVED'; instanceId: string; oldItemName: string; newItemId: string; newItemName: string; }
  | { type: 'QUEST_ADDED'; quest: Omit<Quest, 'id' | 'dateAdded'>; }
  | { type: 'QUEST_STATUS_CHANGED'; questId: string; newStatus: Quest['status']; }
  | { type: 'QUEST_OBJECTIVE_CHANGED'; questId: string; objectiveId: string; completed: boolean; }
  | { type: 'PNJ_ENCOUNTERED'; pnj: Omit<PNJ, 'id' | 'firstEncountered' | 'lastSeen'>; }
  | { type: 'PNJ_RELATION_CHANGED'; pnjId: string; change: number; finalDisposition: number; }
  | { type: 'COMBAT_STARTED'; enemy: Enemy; }
  | { type: 'COMBAT_ENDED'; winner: 'player' | 'enemy'; }
  | { type: 'COMBAT_ACTION'; attacker: string; target: 'player' | 'enemy'; damage: number; newHealth: number; action: string; }
  | { type: 'MONEY_CHANGED'; amount: number; description: string; }
  | { type: 'PLAYER_TRAVELS'; from: string; destination: Position; mode: string; duration: number; }
  | { type: 'TRAVEL_EVENT'; narrative: string; }
  | { type: 'HISTORICAL_CONTACT_ADDED'; payload: HistoricalContact; }
  | { type: 'JOURNAL_ENTRY_ADDED'; payload: Omit<JournalEntry, 'id' | 'timestamp'>; }
  | { type: 'GAME_TIME_PROGRESSED'; minutes: number; }
  | { type: 'SCENARIO_TEXT_SET'; text: string; };


export type GameState = {
  player: Player | null;
  currentScenario: Scenario | null;
  choices: StoryChoice[]; // All available choices, including contextual ones
  currentEnemy?: Enemy | null;
  nearbyPois: EnhancedPOI[] | null;
  gameTimeInMinutes: number;
  journal: JournalEntry[];
  toneSettings: ToneSettings;
  lastPlayed?: any; // For Firestore server timestamp
};

// Notification types for UI feedback after AI processing
export type GameNotificationType =
  | 'xp_gained'
  | 'item_added'
  | 'item_removed'
  | 'leveled_up'
  | 'location_changed'
  | 'stat_changed'
  | 'quest_added'
  | 'quest_updated'
  | 'pnj_encountered'
  | 'pnj_disposition_changed'
  | 'pnj_interaction_logged'
  | 'decision_logged'
  | 'money_changed'
  | 'clue_added'
  | 'document_added'
  | 'investigation_notes_updated'
  | 'tone_settings_updated'
  | 'skill_check'
  | 'info'
  | 'warning';

export interface GameNotification {
  type: GameNotificationType;
  title: string;
  description?: string;
  details?: Record<string, any>;
}

export type Zone = {
  name: string;
  description?: string;
};

export type Position = {
  latitude: number;
  longitude: number;
  name: string;
  summary?: string;
  imageUrl?: string;
  zone?: Zone;
  poiHighlights?: string[];
  tags?: Record<string, string>;
};
