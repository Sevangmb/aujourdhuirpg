import { initializeApp, getApps, getApp, type FirebaseOptions } from 'firebase/app';
import { 
  getAuth, 
  createUserWithEmailAndPassword, 
  signInWithEmailAndPassword, 
  signInAnonymously,
  signOut
} from "firebase/auth";
import { getFirestore } from "firebase/firestore";
import { getStorage } from "firebase/storage";
import { firebaseConfig, validateConfiguration, config } from './config';

// Validation de la configuration Firebase au chargement
const validation = validateConfiguration();

if (!validation.isValid) {
  console.error(
    "‚ùå CRITICAL ERROR in src/lib/firebase.ts: Configuration Firebase incompl√®te.\n" +
    "üîß Variables critiques manquantes:\n" +
    validation.missingCritical.map(key => `   - ${key}`).join('\n') + "\n\n" +
    "üí° Pour corriger ce probl√®me:\n" +
    "  1. Cr√©ez un fichier .env.local √† la racine du projet\n" +
    "  2. Copiez les variables depuis .env.example\n" +
    "  3. Remplacez par vos vraies cl√©s API Firebase\n" +
    "  4. Red√©marrez le serveur (npm run dev)\n\n" +
    "‚ö†Ô∏è  ATTENTION: L'application ne fonctionnera pas tant que ce probl√®me n'est pas r√©solu."
  );
}

// Validation sp√©cifique des cl√©s requises pour Firebase
const requiredKeys = ['apiKey', 'authDomain', 'projectId'] as const;
const missingFirebaseKeys = requiredKeys.filter(key => !firebaseConfig[key]);

if (missingFirebaseKeys.length > 0) {
  console.error(
    "‚ùå Firebase Error: Configuration Firebase incompl√®te.\n" +
    "Variables manquantes: " + missingFirebaseKeys.join(', ') + "\n" +
    "V√©rifiez votre fichier .env.local"
  );
}

// Configuration Firebase utilisant UNIQUEMENT les variables d'environnement
const firebaseOptions: FirebaseOptions = {
  apiKey: firebaseConfig.apiKey!,
  authDomain: firebaseConfig.authDomain!,
  projectId: firebaseConfig.projectId!,
  storageBucket: firebaseConfig.storageBucket!,
  messagingSenderId: firebaseConfig.messagingSenderId!,
  appId: firebaseConfig.appId!,
  measurementId: firebaseConfig.measurementId // Optionnel
};

// V√©rification de s√©curit√© : s'assurer qu'aucune cl√© hardcod√©e n'est utilis√©e
function validateNoHardcodedKeys(config: FirebaseOptions): boolean {
  const suspiciousPatterns = [
    'AIzaSyCfXSVcVuVxcl3Hd2swFjAa4Zzvstyyo_8', // Ancienne cl√© expos√©e
    'AIzaSyCL-e_c4qG51YMfz9NrIVkPEPS8StFuo_I', // Ancienne cl√© Google AI expos√©e
    'undefined',
    'null'
  ];
  
  for (const [key, value] of Object.entries(config)) {
    if (typeof value === 'string' && suspiciousPatterns.some(pattern => value.includes(pattern))) {
      console.error(`‚ùå SECURITY ALERT: Cl√© hardcod√©e d√©tect√©e dans ${key}:`, value);
      return false;
    }
  }
  return true;
}

// Initialize Firebase avec validation de s√©curit√©
let app;
if (!getApps().length) {
  try {
    // Validation de s√©curit√© avant initialisation
    if (!validateNoHardcodedKeys(firebaseOptions)) {
      throw new Error("Configuration Firebase contient des cl√©s hardcod√©es dangereuses");
    }
    
    if (!validation.isValid) {
      throw new Error(`Configuration Firebase invalide: ${validation.missingCritical.join(', ')} manquants`);
    }
    
    app = initializeApp(firebaseOptions);
    console.log("‚úÖ Firebase app initialized successfully with secure configuration.");
    
    if (config.isDevelopment && validation.missingRecommended.length > 0) {
      console.warn(
        "‚ö†Ô∏è Firebase Warning: Variables recommand√©es manquantes:", 
        validation.missingRecommended.join(', ')
      );
    }
    
  } catch (e) {
    console.error("‚ùå Firebase Error: Failed to initialize Firebase app.", e);
    console.error(
      "üîß V√©rifications √† effectuer:\n" +
      "  1. Fichier .env.local existe-t-il ?\n" +
      "  2. Toutes les variables NEXT_PUBLIC_FIREBASE_* sont-elles d√©finies ?\n" +
      "  3. Les cl√©s API sont-elles valides ?\n" +
      "  4. Le projet Firebase existe-t-il ?"
    );
    app = null;
  }
} else {
  app = getApp();
  console.log("‚úÖ Firebase app already initialized.");
}

// Export Firebase services with enhanced error handling
export const firebaseApp = app;

// Services initialization avec gestion d'erreurs robuste
let authService = null;
let dbService = null;
let storageService = null;

if (app) {
  try {
    authService = getAuth(app);
    console.log("‚úÖ Firebase Auth service initialized.");
  } catch (e) {
    console.error("‚ùå Firebase Error: Failed to initialize Auth service.", e);
  }
  
  try {
    dbService = getFirestore(app);
    console.log("‚úÖ Firebase Firestore service initialized.");
  } catch (e) {
    console.error("‚ùå Firebase Error: Failed to initialize Firestore service.", e);
  }
  
  try {
    storageService = getStorage(app);
    console.log("‚úÖ Firebase Storage service initialized.");
  } catch (e) {
    console.error("‚ùå Firebase Error: Failed to initialize Storage service.", e);
  }
} else {
  console.error("‚ùå Firebase services cannot be initialized because Firebase app failed to initialize.");
  console.error("üîß Voir les instructions ci-dessus pour corriger la configuration.");
}

export const auth = authService;
export const db = dbService;
export const storage = storageService;

// Helper functions pour v√©rifier l'√©tat des services
export const isFirebaseConfigured = () => validation.isValid && app !== null;
export const getFirebaseStatus = () => ({
  isConfigured: validation.isValid,
  appInitialized: app !== null,
  authAvailable: authService !== null,
  dbAvailable: dbService !== null,
  storageAvailable: storageService !== null,
  missingVars: validation.missingCritical,
  warnings: validation.warnings
});

// Auth functions export
export { 
  createUserWithEmailAndPassword, 
  signInWithEmailAndPassword, 
  signInAnonymously,
  signOut 
};

// Log final status en d√©veloppement
if (config.isDevelopment) {
  const status = getFirebaseStatus();
  if (status.isConfigured && status.appInitialized) {
    console.log("üéâ Firebase totalement configur√© et op√©rationnel !");
  } else {
    console.warn("‚ö†Ô∏è Firebase partiellement configur√©. Certaines fonctionnalit√©s peuvent ne pas marcher.");
  }
}
